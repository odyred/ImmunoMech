using ISAAR.MSolve.LinearAlgebra.Matrices;

namespace ISAAR.MSolve.LinearAlgebra.Tests.TestData.FiniteElementMatrices
{
    /// <summary>
    /// Stiffness matrix of hexahedral 8-node element. The element is a cube. Various boundary 
    /// conditions are possible.
    /// Authors: Serafeim Bakalakos
    /// </summary>
    internal static class Hexa8ElementMatrix
    {
        internal static double[,] UnconstrainedStiffness => new double[,]
        {
            {  1.175214E+003,  4.006410E+002,  4.006410E+002, -5.341880E+002,  8.012821E+001,  8.012821E+001, -4.273504E+002, -4.006410E+002,  4.006410E+001,  2.670940E+002, -8.012821E+001,  2.003205E+002,  2.670940E+002,  2.003205E+002, -8.012821E+001, -4.273504E+002,  4.006410E+001, -4.006410E+002, -2.938034E+002, -2.003205E+002, -2.003205E+002, -2.670940E+001, -4.006410E+001, -4.006410E+001 },
            {  4.006410E+002,  1.175214E+003,  4.006410E+002, -8.012821E+001,  2.670940E+002,  2.003205E+002, -4.006410E+002, -4.273504E+002,  4.006410E+001,  8.012821E+001, -5.341880E+002,  8.012821E+001,  2.003205E+002,  2.670940E+002, -8.012821E+001, -4.006410E+001, -2.670940E+001, -4.006410E+001, -2.003205E+002, -2.938034E+002, -2.003205E+002,  4.006410E+001, -4.273504E+002, -4.006410E+002 },
            {  4.006410E+002,  4.006410E+002,  1.175214E+003, -8.012821E+001,  2.003205E+002,  2.670940E+002, -4.006410E+001, -4.006410E+001, -2.670940E+001,  2.003205E+002, -8.012821E+001,  2.670940E+002,  8.012821E+001,  8.012821E+001, -5.341880E+002, -4.006410E+002,  4.006410E+001, -4.273504E+002, -2.003205E+002, -2.003205E+002, -2.938034E+002,  4.006410E+001, -4.006410E+002, -4.273504E+002 },
            { -5.341880E+002, -8.012821E+001, -8.012821E+001,  1.175214E+003, -4.006410E+002, -4.006410E+002,  2.670940E+002,  8.012821E+001, -2.003205E+002, -4.273504E+002,  4.006410E+002, -4.006410E+001, -4.273504E+002, -4.006410E+001,  4.006410E+002,  2.670940E+002, -2.003205E+002,  8.012821E+001, -2.670940E+001,  4.006410E+001,  4.006410E+001, -2.938034E+002,  2.003205E+002,  2.003205E+002 },
            {  8.012821E+001,  2.670940E+002,  2.003205E+002, -4.006410E+002,  1.175214E+003,  4.006410E+002, -8.012821E+001, -5.341880E+002,  8.012821E+001,  4.006410E+002, -4.273504E+002,  4.006410E+001,  4.006410E+001, -2.670940E+001, -4.006410E+001, -2.003205E+002,  2.670940E+002, -8.012821E+001, -4.006410E+001, -4.273504E+002, -4.006410E+002,  2.003205E+002, -2.938034E+002, -2.003205E+002 },
            {  8.012821E+001,  2.003205E+002,  2.670940E+002, -4.006410E+002,  4.006410E+002,  1.175214E+003, -2.003205E+002, -8.012821E+001,  2.670940E+002,  4.006410E+001, -4.006410E+001, -2.670940E+001,  4.006410E+002,  4.006410E+001, -4.273504E+002, -8.012821E+001,  8.012821E+001, -5.341880E+002, -4.006410E+001, -4.006410E+002, -4.273504E+002,  2.003205E+002, -2.003205E+002, -2.938034E+002 },
            { -4.273504E+002, -4.006410E+002, -4.006410E+001,  2.670940E+002, -8.012821E+001, -2.003205E+002,  1.175214E+003,  4.006410E+002, -4.006410E+002, -5.341880E+002,  8.012821E+001, -8.012821E+001, -2.938034E+002, -2.003205E+002,  2.003205E+002, -2.670940E+001, -4.006410E+001,  4.006410E+001,  2.670940E+002,  2.003205E+002,  8.012821E+001, -4.273504E+002,  4.006410E+001,  4.006410E+002 },
            { -4.006410E+002, -4.273504E+002, -4.006410E+001,  8.012821E+001, -5.341880E+002, -8.012821E+001,  4.006410E+002,  1.175214E+003, -4.006410E+002, -8.012821E+001,  2.670940E+002, -2.003205E+002, -2.003205E+002, -2.938034E+002,  2.003205E+002,  4.006410E+001, -4.273504E+002,  4.006410E+002,  2.003205E+002,  2.670940E+002,  8.012821E+001, -4.006410E+001, -2.670940E+001,  4.006410E+001 },
            {  4.006410E+001,  4.006410E+001, -2.670940E+001, -2.003205E+002,  8.012821E+001,  2.670940E+002, -4.006410E+002, -4.006410E+002,  1.175214E+003,  8.012821E+001, -2.003205E+002,  2.670940E+002,  2.003205E+002,  2.003205E+002, -2.938034E+002, -4.006410E+001,  4.006410E+002, -4.273504E+002, -8.012821E+001, -8.012821E+001, -5.341880E+002,  4.006410E+002, -4.006410E+001, -4.273504E+002 },
            {  2.670940E+002,  8.012821E+001,  2.003205E+002, -4.273504E+002,  4.006410E+002,  4.006410E+001, -5.341880E+002, -8.012821E+001,  8.012821E+001,  1.175214E+003, -4.006410E+002,  4.006410E+002, -2.670940E+001,  4.006410E+001, -4.006410E+001, -2.938034E+002,  2.003205E+002, -2.003205E+002, -4.273504E+002, -4.006410E+001, -4.006410E+002,  2.670940E+002, -2.003205E+002, -8.012821E+001 },
            { -8.012821E+001, -5.341880E+002, -8.012821E+001,  4.006410E+002, -4.273504E+002, -4.006410E+001,  8.012821E+001,  2.670940E+002, -2.003205E+002, -4.006410E+002,  1.175214E+003, -4.006410E+002, -4.006410E+001, -4.273504E+002,  4.006410E+002,  2.003205E+002, -2.938034E+002,  2.003205E+002,  4.006410E+001, -2.670940E+001,  4.006410E+001, -2.003205E+002,  2.670940E+002,  8.012821E+001 },
            {  2.003205E+002,  8.012821E+001,  2.670940E+002, -4.006410E+001,  4.006410E+001, -2.670940E+001, -8.012821E+001, -2.003205E+002,  2.670940E+002,  4.006410E+002, -4.006410E+002,  1.175214E+003,  4.006410E+001,  4.006410E+002, -4.273504E+002, -2.003205E+002,  2.003205E+002, -2.938034E+002, -4.006410E+002, -4.006410E+001, -4.273504E+002,  8.012821E+001, -8.012821E+001, -5.341880E+002 },
            {  2.670940E+002,  2.003205E+002,  8.012821E+001, -4.273504E+002,  4.006410E+001,  4.006410E+002, -2.938034E+002, -2.003205E+002,  2.003205E+002, -2.670940E+001, -4.006410E+001,  4.006410E+001,  1.175214E+003,  4.006410E+002, -4.006410E+002, -5.341880E+002,  8.012821E+001, -8.012821E+001, -4.273504E+002, -4.006410E+002, -4.006410E+001,  2.670940E+002, -8.012821E+001, -2.003205E+002 },
            {  2.003205E+002,  2.670940E+002,  8.012821E+001, -4.006410E+001, -2.670940E+001,  4.006410E+001, -2.003205E+002, -2.938034E+002,  2.003205E+002,  4.006410E+001, -4.273504E+002,  4.006410E+002,  4.006410E+002,  1.175214E+003, -4.006410E+002, -8.012821E+001,  2.670940E+002, -2.003205E+002, -4.006410E+002, -4.273504E+002, -4.006410E+001,  8.012821E+001, -5.341880E+002, -8.012821E+001 },
            { -8.012821E+001, -8.012821E+001, -5.341880E+002,  4.006410E+002, -4.006410E+001, -4.273504E+002,  2.003205E+002,  2.003205E+002, -2.938034E+002, -4.006410E+001,  4.006410E+002, -4.273504E+002, -4.006410E+002, -4.006410E+002,  1.175214E+003,  8.012821E+001, -2.003205E+002,  2.670940E+002,  4.006410E+001,  4.006410E+001, -2.670940E+001, -2.003205E+002,  8.012821E+001,  2.670940E+002 },
            { -4.273504E+002, -4.006410E+001, -4.006410E+002,  2.670940E+002, -2.003205E+002, -8.012821E+001, -2.670940E+001,  4.006410E+001, -4.006410E+001, -2.938034E+002,  2.003205E+002, -2.003205E+002, -5.341880E+002, -8.012821E+001,  8.012821E+001,  1.175214E+003, -4.006410E+002,  4.006410E+002,  2.670940E+002,  8.012821E+001,  2.003205E+002, -4.273504E+002,  4.006410E+002,  4.006410E+001 },
            {  4.006410E+001, -2.670940E+001,  4.006410E+001, -2.003205E+002,  2.670940E+002,  8.012821E+001, -4.006410E+001, -4.273504E+002,  4.006410E+002,  2.003205E+002, -2.938034E+002,  2.003205E+002,  8.012821E+001,  2.670940E+002, -2.003205E+002, -4.006410E+002,  1.175214E+003, -4.006410E+002, -8.012821E+001, -5.341880E+002, -8.012821E+001,  4.006410E+002, -4.273504E+002, -4.006410E+001 },
            { -4.006410E+002, -4.006410E+001, -4.273504E+002,  8.012821E+001, -8.012821E+001, -5.341880E+002,  4.006410E+001,  4.006410E+002, -4.273504E+002, -2.003205E+002,  2.003205E+002, -2.938034E+002, -8.012821E+001, -2.003205E+002,  2.670940E+002,  4.006410E+002, -4.006410E+002,  1.175214E+003,  2.003205E+002,  8.012821E+001,  2.670940E+002, -4.006410E+001,  4.006410E+001, -2.670940E+001 },
            { -2.938034E+002, -2.003205E+002, -2.003205E+002, -2.670940E+001, -4.006410E+001, -4.006410E+001,  2.670940E+002,  2.003205E+002, -8.012821E+001, -4.273504E+002,  4.006410E+001, -4.006410E+002, -4.273504E+002, -4.006410E+002,  4.006410E+001,  2.670940E+002, -8.012821E+001,  2.003205E+002,  1.175214E+003,  4.006410E+002,  4.006410E+002, -5.341880E+002,  8.012821E+001,  8.012821E+001 },
            { -2.003205E+002, -2.938034E+002, -2.003205E+002,  4.006410E+001, -4.273504E+002, -4.006410E+002,  2.003205E+002,  2.670940E+002, -8.012821E+001, -4.006410E+001, -2.670940E+001, -4.006410E+001, -4.006410E+002, -4.273504E+002,  4.006410E+001,  8.012821E+001, -5.341880E+002,  8.012821E+001,  4.006410E+002,  1.175214E+003,  4.006410E+002, -8.012821E+001,  2.670940E+002,  2.003205E+002 },
            { -2.003205E+002, -2.003205E+002, -2.938034E+002,  4.006410E+001, -4.006410E+002, -4.273504E+002,  8.012821E+001,  8.012821E+001, -5.341880E+002, -4.006410E+002,  4.006410E+001, -4.273504E+002, -4.006410E+001, -4.006410E+001, -2.670940E+001,  2.003205E+002, -8.012821E+001,  2.670940E+002,  4.006410E+002,  4.006410E+002,  1.175214E+003, -8.012821E+001,  2.003205E+002,  2.670940E+002 },
            { -2.670940E+001,  4.006410E+001,  4.006410E+001, -2.938034E+002,  2.003205E+002,  2.003205E+002, -4.273504E+002, -4.006410E+001,  4.006410E+002,  2.670940E+002, -2.003205E+002,  8.012821E+001,  2.670940E+002,  8.012821E+001, -2.003205E+002, -4.273504E+002,  4.006410E+002, -4.006410E+001, -5.341880E+002, -8.012821E+001, -8.012821E+001,  1.175214E+003, -4.006410E+002, -4.006410E+002 },
            { -4.006410E+001, -4.273504E+002, -4.006410E+002,  2.003205E+002, -2.938034E+002, -2.003205E+002,  4.006410E+001, -2.670940E+001, -4.006410E+001, -2.003205E+002,  2.670940E+002, -8.012821E+001, -8.012821E+001, -5.341880E+002,  8.012821E+001,  4.006410E+002, -4.273504E+002,  4.006410E+001,  8.012821E+001,  2.670940E+002,  2.003205E+002, -4.006410E+002,  1.175214E+003,  4.006410E+002 },
            { -4.006410E+001, -4.006410E+002, -4.273504E+002,  2.003205E+002, -2.003205E+002, -2.938034E+002,  4.006410E+002,  4.006410E+001, -4.273504E+002, -8.012821E+001,  8.012821E+001, -5.341880E+002, -2.003205E+002, -8.012821E+001,  2.670940E+002,  4.006410E+001, -4.006410E+001, -2.670940E+001,  8.012821E+001,  2.003205E+002,  2.670940E+002, -4.006410E+002,  4.006410E+002,  1.175214E+003 }
        };

        
        internal static double[,] ClampedStiffness
        {
            get
            {
                var unconstrained = Matrix.CreateFromArray(UnconstrainedStiffness);
                int order = unconstrained.NumColumns;

                // constrain x, y, z dofs of nodes 0, 1, 3
                var freeDofs = new int[] { 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };
                return unconstrained.GetSubmatrix(freeDofs, freeDofs).CopyToArray2D();
            }
        }

        internal static double[,] PinnedStiffness
        {
            get
            {
                var unconstrained = Matrix.CreateFromArray(UnconstrainedStiffness);
                int order = unconstrained.NumColumns;

                // constrain x, y, z dofs of node 0
                return unconstrained.GetSubmatrix(3, order, 3, order).CopyToArray2D();
            }
        }
    }
}
